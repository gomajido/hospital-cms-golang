// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/http_client/http/http_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	bytes "bytes"
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIHTTPClientWrapper is a mock of IHTTPClientWrapper interface.
type MockIHTTPClientWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockIHTTPClientWrapperMockRecorder
}

// MockIHTTPClientWrapperMockRecorder is the mock recorder for MockIHTTPClientWrapper.
type MockIHTTPClientWrapperMockRecorder struct {
	mock *MockIHTTPClientWrapper
}

// NewMockIHTTPClientWrapper creates a new mock instance.
func NewMockIHTTPClientWrapper(ctrl *gomock.Controller) *MockIHTTPClientWrapper {
	mock := &MockIHTTPClientWrapper{ctrl: ctrl}
	mock.recorder = &MockIHTTPClientWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHTTPClientWrapper) EXPECT() *MockIHTTPClientWrapperMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIHTTPClientWrapper) Get(url string, headers http.Header) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", url, headers)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIHTTPClientWrapperMockRecorder) Get(url, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIHTTPClientWrapper)(nil).Get), url, headers)
}

// Post mocks base method.
func (m *MockIHTTPClientWrapper) Post(url string, request interface{}, headers http.Header) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", url, request, headers)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockIHTTPClientWrapperMockRecorder) Post(url, request, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockIHTTPClientWrapper)(nil).Post), url, request, headers)
}

// PostMultipart mocks base method.
func (m *MockIHTTPClientWrapper) PostMultipart(url string, body *bytes.Buffer, headers http.Header) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostMultipart", url, body, headers)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostMultipart indicates an expected call of PostMultipart.
func (mr *MockIHTTPClientWrapperMockRecorder) PostMultipart(url, body, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMultipart", reflect.TypeOf((*MockIHTTPClientWrapper)(nil).PostMultipart), url, body, headers)
}

// PostMultipartWithContext mocks base method.
func (m *MockIHTTPClientWrapper) PostMultipartWithContext(ctx context.Context, url string, body *bytes.Buffer, headers http.Header) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostMultipartWithContext", ctx, url, body, headers)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostMultipartWithContext indicates an expected call of PostMultipartWithContext.
func (mr *MockIHTTPClientWrapperMockRecorder) PostMultipartWithContext(ctx, url, body, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMultipartWithContext", reflect.TypeOf((*MockIHTTPClientWrapper)(nil).PostMultipartWithContext), ctx, url, body, headers)
}

// PostWithContext mocks base method.
func (m *MockIHTTPClientWrapper) PostWithContext(ctx context.Context, url string, request interface{}, headers http.Header) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostWithContext", ctx, url, request, headers)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostWithContext indicates an expected call of PostWithContext.
func (mr *MockIHTTPClientWrapperMockRecorder) PostWithContext(ctx, url, request, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostWithContext", reflect.TypeOf((*MockIHTTPClientWrapper)(nil).PostWithContext), ctx, url, request, headers)
}
