// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/storage/storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockIStorageProviderRepository is a mock of IStorageProviderRepository interface.
type MockIStorageProviderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIStorageProviderRepositoryMockRecorder
}

// MockIStorageProviderRepositoryMockRecorder is the mock recorder for MockIStorageProviderRepository.
type MockIStorageProviderRepositoryMockRecorder struct {
	mock *MockIStorageProviderRepository
}

// NewMockIStorageProviderRepository creates a new mock instance.
func NewMockIStorageProviderRepository(ctrl *gomock.Controller) *MockIStorageProviderRepository {
	mock := &MockIStorageProviderRepository{ctrl: ctrl}
	mock.recorder = &MockIStorageProviderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorageProviderRepository) EXPECT() *MockIStorageProviderRepositoryMockRecorder {
	return m.recorder
}

// AllDirectories mocks base method.
func (m *MockIStorageProviderRepository) AllDirectories(ctx context.Context, directory string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllDirectories", ctx, directory)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllDirectories indicates an expected call of AllDirectories.
func (mr *MockIStorageProviderRepositoryMockRecorder) AllDirectories(ctx, directory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllDirectories", reflect.TypeOf((*MockIStorageProviderRepository)(nil).AllDirectories), ctx, directory)
}

// AllFiles mocks base method.
func (m *MockIStorageProviderRepository) AllFiles(ctx context.Context, directory string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllFiles", ctx, directory)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllFiles indicates an expected call of AllFiles.
func (mr *MockIStorageProviderRepositoryMockRecorder) AllFiles(ctx, directory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllFiles", reflect.TypeOf((*MockIStorageProviderRepository)(nil).AllFiles), ctx, directory)
}

// Append mocks base method.
func (m *MockIStorageProviderRepository) Append(ctx context.Context, path, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", ctx, path, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockIStorageProviderRepositoryMockRecorder) Append(ctx, path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockIStorageProviderRepository)(nil).Append), ctx, path, data)
}

// Copy mocks base method.
func (m *MockIStorageProviderRepository) Copy(ctx context.Context, from, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", ctx, from, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockIStorageProviderRepositoryMockRecorder) Copy(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockIStorageProviderRepository)(nil).Copy), ctx, from, to)
}

// Delete mocks base method.
func (m *MockIStorageProviderRepository) Delete(ctx context.Context, paths ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range paths {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIStorageProviderRepositoryMockRecorder) Delete(ctx interface{}, paths ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, paths...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIStorageProviderRepository)(nil).Delete), varargs...)
}

// DeleteDirectory mocks base method.
func (m *MockIStorageProviderRepository) DeleteDirectory(ctx context.Context, directory string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDirectory", ctx, directory)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDirectory indicates an expected call of DeleteDirectory.
func (mr *MockIStorageProviderRepositoryMockRecorder) DeleteDirectory(ctx, directory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDirectory", reflect.TypeOf((*MockIStorageProviderRepository)(nil).DeleteDirectory), ctx, directory)
}

// Directories mocks base method.
func (m *MockIStorageProviderRepository) Directories(ctx context.Context, directory string, recursive bool) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Directories", ctx, directory, recursive)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Directories indicates an expected call of Directories.
func (mr *MockIStorageProviderRepositoryMockRecorder) Directories(ctx, directory, recursive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Directories", reflect.TypeOf((*MockIStorageProviderRepository)(nil).Directories), ctx, directory, recursive)
}

// Exists mocks base method.
func (m *MockIStorageProviderRepository) Exists(ctx context.Context, path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockIStorageProviderRepositoryMockRecorder) Exists(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIStorageProviderRepository)(nil).Exists), ctx, path)
}

// Files mocks base method.
func (m *MockIStorageProviderRepository) Files(ctx context.Context, directory string, recursive bool) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Files", ctx, directory, recursive)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Files indicates an expected call of Files.
func (mr *MockIStorageProviderRepositoryMockRecorder) Files(ctx, directory, recursive interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Files", reflect.TypeOf((*MockIStorageProviderRepository)(nil).Files), ctx, directory, recursive)
}

// GenerateURL mocks base method.
func (m *MockIStorageProviderRepository) GenerateURL(ctx context.Context, path string, expires time.Duration) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateURL", ctx, path, expires)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateURL indicates an expected call of GenerateURL.
func (mr *MockIStorageProviderRepositoryMockRecorder) GenerateURL(ctx, path, expires interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateURL", reflect.TypeOf((*MockIStorageProviderRepository)(nil).GenerateURL), ctx, path, expires)
}

// Get mocks base method.
func (m *MockIStorageProviderRepository) Get(ctx context.Context, path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIStorageProviderRepositoryMockRecorder) Get(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIStorageProviderRepository)(nil).Get), ctx, path)
}

// GetVisibility mocks base method.
func (m *MockIStorageProviderRepository) GetVisibility(ctx context.Context, path string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVisibility", ctx, path)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVisibility indicates an expected call of GetVisibility.
func (mr *MockIStorageProviderRepositoryMockRecorder) GetVisibility(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVisibility", reflect.TypeOf((*MockIStorageProviderRepository)(nil).GetVisibility), ctx, path)
}

// LastModified mocks base method.
func (m *MockIStorageProviderRepository) LastModified(ctx context.Context, path string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastModified", ctx, path)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastModified indicates an expected call of LastModified.
func (mr *MockIStorageProviderRepositoryMockRecorder) LastModified(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastModified", reflect.TypeOf((*MockIStorageProviderRepository)(nil).LastModified), ctx, path)
}

// MakeDirectory mocks base method.
func (m *MockIStorageProviderRepository) MakeDirectory(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeDirectory", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeDirectory indicates an expected call of MakeDirectory.
func (mr *MockIStorageProviderRepositoryMockRecorder) MakeDirectory(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeDirectory", reflect.TypeOf((*MockIStorageProviderRepository)(nil).MakeDirectory), ctx, path)
}

// Move mocks base method.
func (m *MockIStorageProviderRepository) Move(ctx context.Context, from, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", ctx, from, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// Move indicates an expected call of Move.
func (mr *MockIStorageProviderRepositoryMockRecorder) Move(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockIStorageProviderRepository)(nil).Move), ctx, from, to)
}

// Prepend mocks base method.
func (m *MockIStorageProviderRepository) Prepend(ctx context.Context, path, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepend", ctx, path, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prepend indicates an expected call of Prepend.
func (mr *MockIStorageProviderRepositoryMockRecorder) Prepend(ctx, path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepend", reflect.TypeOf((*MockIStorageProviderRepository)(nil).Prepend), ctx, path, data)
}

// Put mocks base method.
func (m *MockIStorageProviderRepository) Put(ctx context.Context, path string, contents interface{}, options ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, path, contents}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockIStorageProviderRepositoryMockRecorder) Put(ctx, path, contents interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, path, contents}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockIStorageProviderRepository)(nil).Put), varargs...)
}

// ReadStream mocks base method.
func (m *MockIStorageProviderRepository) ReadStream(ctx context.Context, path string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadStream", ctx, path)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadStream indicates an expected call of ReadStream.
func (mr *MockIStorageProviderRepositoryMockRecorder) ReadStream(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadStream", reflect.TypeOf((*MockIStorageProviderRepository)(nil).ReadStream), ctx, path)
}

// SetVisibility mocks base method.
func (m *MockIStorageProviderRepository) SetVisibility(ctx context.Context, path, visibility string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVisibility", ctx, path, visibility)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVisibility indicates an expected call of SetVisibility.
func (mr *MockIStorageProviderRepositoryMockRecorder) SetVisibility(ctx, path, visibility interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVisibility", reflect.TypeOf((*MockIStorageProviderRepository)(nil).SetVisibility), ctx, path, visibility)
}

// Size mocks base method.
func (m *MockIStorageProviderRepository) Size(ctx context.Context, path string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size", ctx, path)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size.
func (mr *MockIStorageProviderRepositoryMockRecorder) Size(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockIStorageProviderRepository)(nil).Size), ctx, path)
}

// WriteStream mocks base method.
func (m *MockIStorageProviderRepository) WriteStream(ctx context.Context, path string, reader io.Reader, options ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, path, reader}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteStream", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteStream indicates an expected call of WriteStream.
func (mr *MockIStorageProviderRepositoryMockRecorder) WriteStream(ctx, path, reader interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, path, reader}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteStream", reflect.TypeOf((*MockIStorageProviderRepository)(nil).WriteStream), varargs...)
}
