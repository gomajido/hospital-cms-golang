// Code generated by MockGen. DO NOT EDIT.
// Source: internal/module/auth/domain/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/gomajido/hospital-cms-golang/internal/module/auth/domain"
)

// MockAuthRepository is a mock of AuthRepository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// AssignRolesToUser mocks base method.
func (m *MockAuthRepository) AssignRolesToUser(ctx context.Context, userID string, roleIDs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignRolesToUser", ctx, userID, roleIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignRolesToUser indicates an expected call of AssignRolesToUser.
func (mr *MockAuthRepositoryMockRecorder) AssignRolesToUser(ctx, userID, roleIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignRolesToUser", reflect.TypeOf((*MockAuthRepository)(nil).AssignRolesToUser), ctx, userID, roleIDs)
}

// CreateUser mocks base method.
func (m *MockAuthRepository) CreateUser(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthRepositoryMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthRepository)(nil).CreateUser), ctx, user)
}

// CreateUserToken mocks base method.
func (m *MockAuthRepository) CreateUserToken(ctx context.Context, token *domain.UserToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserToken indicates an expected call of CreateUserToken.
func (mr *MockAuthRepositoryMockRecorder) CreateUserToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserToken", reflect.TypeOf((*MockAuthRepository)(nil).CreateUserToken), ctx, token)
}

// DeleteUser mocks base method.
func (m *MockAuthRepository) DeleteUser(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAuthRepositoryMockRecorder) DeleteUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAuthRepository)(nil).DeleteUser), ctx, id)
}

// GetRoleByID mocks base method.
func (m *MockAuthRepository) GetRoleByID(ctx context.Context, id string) (*domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleByID", ctx, id)
	ret0, _ := ret[0].(*domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleByID indicates an expected call of GetRoleByID.
func (mr *MockAuthRepositoryMockRecorder) GetRoleByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleByID", reflect.TypeOf((*MockAuthRepository)(nil).GetRoleByID), ctx, id)
}

// GetRolesByNames mocks base method.
func (m *MockAuthRepository) GetRolesByNames(ctx context.Context, names []string) ([]domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRolesByNames", ctx, names)
	ret0, _ := ret[0].([]domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRolesByNames indicates an expected call of GetRolesByNames.
func (mr *MockAuthRepositoryMockRecorder) GetRolesByNames(ctx, names interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRolesByNames", reflect.TypeOf((*MockAuthRepository)(nil).GetRolesByNames), ctx, names)
}

// GetUserByEmail mocks base method.
func (m *MockAuthRepository) GetUserByEmail(ctx context.Context, email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockAuthRepositoryMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAuthRepository)(nil).GetUserByEmail), ctx, email)
}

// GetUserByID mocks base method.
func (m *MockAuthRepository) GetUserByID(ctx context.Context, id string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAuthRepositoryMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAuthRepository)(nil).GetUserByID), ctx, id)
}

// GetUserRoles mocks base method.
func (m *MockAuthRepository) GetUserRoles(ctx context.Context, userID string) ([]domain.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoles", ctx, userID)
	ret0, _ := ret[0].([]domain.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoles indicates an expected call of GetUserRoles.
func (mr *MockAuthRepositoryMockRecorder) GetUserRoles(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoles", reflect.TypeOf((*MockAuthRepository)(nil).GetUserRoles), ctx, userID)
}

// GetUserTokenByIDAndToken mocks base method.
func (m *MockAuthRepository) GetUserTokenByIDAndToken(ctx context.Context, userID, token string) (*domain.UserToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTokenByIDAndToken", ctx, userID, token)
	ret0, _ := ret[0].(*domain.UserToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTokenByIDAndToken indicates an expected call of GetUserTokenByIDAndToken.
func (mr *MockAuthRepositoryMockRecorder) GetUserTokenByIDAndToken(ctx, userID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTokenByIDAndToken", reflect.TypeOf((*MockAuthRepository)(nil).GetUserTokenByIDAndToken), ctx, userID, token)
}

// InvalidateUserToken mocks base method.
func (m *MockAuthRepository) InvalidateUserToken(ctx context.Context, userID, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateUserToken", ctx, userID, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateUserToken indicates an expected call of InvalidateUserToken.
func (mr *MockAuthRepositoryMockRecorder) InvalidateUserToken(ctx, userID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateUserToken", reflect.TypeOf((*MockAuthRepository)(nil).InvalidateUserToken), ctx, userID, token)
}

// InvalidateUserTokens mocks base method.
func (m *MockAuthRepository) InvalidateUserTokens(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateUserTokens", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateUserTokens indicates an expected call of InvalidateUserTokens.
func (mr *MockAuthRepositoryMockRecorder) InvalidateUserTokens(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateUserTokens", reflect.TypeOf((*MockAuthRepository)(nil).InvalidateUserTokens), ctx, userID)
}

// UpdateUser mocks base method.
func (m *MockAuthRepository) UpdateUser(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockAuthRepositoryMockRecorder) UpdateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockAuthRepository)(nil).UpdateUser), ctx, user)
}
